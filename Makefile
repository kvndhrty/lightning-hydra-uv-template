
.PHONY: help install install-dev clean clean-logs format test test-full train

help:  ## Show help
	@grep -E '^[.a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'

clean: ## Clean autogenerated files
	rm -rf dist
	find . -type f -name "*.DS_Store" -ls -delete
	find . | grep -E "(__pycache__|\.pyc|\.pyo)" | xargs rm -rf
	find . | grep -E ".pytest_cache" | xargs rm -rf
	find . | grep -E ".ipynb_checkpoints" | xargs rm -rf
	rm -f .coverage

clean-logs: ## Clean logs
	rm -rf logs/**

install: ## Install the package in production mode
	uv pip sync pyproject.toml

install-dev: ## Install the package in development mode with all extras
	uv pip install -e ".[all]"
	uv pip install -r pyproject.toml --extra dev

format: ## Run pre-commit hooks
	pre-commit run -a

sync: ## Merge changes from main branch to your current branch
	git pull
	git pull origin main

test: ## Run not slow tests
	uv run pytest -k "not slow"

test-full: ## Run all tests
	uv run pytest

train: ## Train the model
	uv run python src/train.py

eval: ## Evaluate the model
	uv run python src/eval.py

# Docker commands
docker-build: ## Build Docker image (use make docker-build-gpu or docker-build-dev)
	./scripts/docker_build.sh gpu

docker-build-gpu: ## Build GPU-enabled Docker image
	./scripts/docker_build.sh gpu

docker-build-dev: ## Build lightweight development Docker image
	./scripts/docker_build.sh dev

docker-build-all: ## Build all Docker images
	./scripts/docker_build.sh all

docker-run: ## Run Docker container with GPU support
	./scripts/docker_run.sh --gpu

docker-run-cpu: ## Run Docker container (CPU only)
	./scripts/docker_run.sh --cpu

docker-compose-up: ## Start services with docker-compose
	docker-compose up -d

docker-compose-down: ## Stop services with docker-compose
	docker-compose down

docker-compose-logs: ## Show logs from docker-compose services
	docker-compose logs -f
