[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "lightning-hydra-uv-template"
version = "0.1.0"
description = "PyTorch Lightning + Hydra + uv template for rapid experimentation"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    # --------- pytorch --------- #
    "torch>=2.0.0",
    "torchvision>=0.15.0",
    "lightning>=2.0.0",
    "torchmetrics>=0.11.4",

    # --------- hydra --------- #
    "hydra-core==1.3.2",
    "hydra-colorlog==1.2.0",
    "hydra-optuna-sweeper==1.2.0",

    # --------- others --------- #
    "rootutils",
    "rich",
    "python-dotenv",
    "pandas",
    "torchinfo",
]

[project.optional-dependencies]
loggers = [
    "wandb",
    "tensorboard",
]
dev = [
    "pre-commit",
    "pytest",
    "pytest-cov",
    "pytest-mock",
    "pytest-timeout",
    "hypothesis",
]
all = [
    "lightning-hydra-uv-template[loggers,dev]",
]

[project.scripts]
lht = "src.cli:main"
lht-train = "src.train:main"
lht-eval = "src.eval:main"

[project.urls]
Homepage = "https://github.com/kvndhrty/lightning-hydra-uv-template"
Documentation = "https://github.com/kvndhrty/lightning-hydra-uv-template"
Repository = "https://github.com/kvndhrty/lightning-hydra-uv-template"
Issues = "https://github.com/kvndhrty/lightning-hydra-uv-template/issues"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.pytest.ini_options]
addopts = [
  "--color=yes",
  "--durations=0",
  "--strict-markers",
  "--doctest-modules",
]
filterwarnings = [
  "ignore::DeprecationWarning",
  "ignore::UserWarning",
]
log_cli = "True"
markers = [
  "slow: slow tests",
]
minversion = "6.0"
testpaths = "tests/"

[tool.coverage.report]
exclude_lines = [
    "pragma: nocover",
    "raise NotImplementedError",
    "raise NotImplementedError()",
    "if __name__ == .__main__.:",
]

[tool.uv]
dev-dependencies = [
    "pre-commit>=3.5.0",
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-timeout>=2.2.0",
    "hypothesis>=6.88.0",
    "ruff>=0.1.8",
]

[tool.ruff]
line-length = 99
target-version = "py39"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "N",  # pep8-naming
    "UP", # pyupgrade
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "SIM", # flake8-simplify
]
ignore = [
    "E501", # line too long (handled by formatter)
    "E402", # module import not at top of file
    "F401", # imported but unused
    "F841", # local variable assigned but never used
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["D"]
